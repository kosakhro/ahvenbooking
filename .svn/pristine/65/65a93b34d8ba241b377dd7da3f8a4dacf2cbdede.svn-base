package fxAhvenbooking;

import java.net.URL;
import java.util.ResourceBundle;

import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.ModalControllerInterface;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import bookings.Client;

/**
 * @author Konstantin Sakharovskiy
 * @version Feb 7, 2019
 * event handle for Client Card page
 */
public class ClientCardGUIController implements ModalControllerInterface<Client>, Initializable  {

    
    @FXML private Label warning;
    
    @FXML private TextField editName;
    @FXML private TextField editSurname;
    @FXML private TextField editStreet;
    @FXML private TextField editStreet2;
    @FXML private TextField editZIP;
    @FXML private TextField editCity;
    
    
    @FXML private void DoseNotWork() {
        
        Dialogs.showMessageDialog("Does not work yet, keep calm");
        
    }
    
    @FXML private void handleSave() {
        
        ModalController.closeStage(warning);
        //
    }
    
    @FXML private void handleDelete() {
        ModalController.closeStage(warning);
        //
    }
    
    @FXML private void handleNewReservation() {
        //
    }
    
    @FXML private void handleCloseWithoutSaving() {
        clientPoint = null;
        ModalController.closeStage(warning);
        
    }
    


    //==================================================
    
    private Client clientPoint;
    private TextField[] fields;
    

    @Override
    public void initialize(URL url, ResourceBundle bundle) {
        platform();
        
    }

    private void platform() {
        fields = new TextField[]{editName, 
                                editSurname, 
                                editStreet,
                                editStreet2,
                                editZIP,
                                editCity};
        int i = 0;
        for (TextField field : fields) {
            final int k = ++i;
            field.setOnKeyReleased( e -> clientChange(k, (TextField)(e.getSource())));
        }
        
        
    }

    private void clientChange(int k, TextField textField) {
        if (clientPoint == null) return;
        String s = textField.getText();
        String virhe = null;
        switch (k) {
        case 1 : virhe = clientPoint.setName(s); break;
        case 2 : virhe = clientPoint.setSurname(s); break;
        case 3 : virhe = clientPoint.setStreet(s); break;
        case 4 : virhe = clientPoint.setStreet2(s); break;
        case 5 : virhe = clientPoint.setZIP(s); break;
        case 6 : virhe = clientPoint.setCity(s); break;
        default :
       
        }
        
        if (virhe == null) {
            Dialogs.setToolTipText(textField, "");
            textField.getStyleClass().removeAll("virhe");
            naytaVirhe(virhe);
        } else {
            Dialogs.setToolTipText(textField, virhe);
            textField.getStyleClass().add("virhe");
            naytaVirhe(virhe);
        }
        
        
        
    }

    private void naytaVirhe(String virhe) {
        if (virhe == null || virhe.isEmpty()) {
            warning.setText("");
            warning.getStyleClass().removeAll("virhe");
            return;
        }
        warning.setText(virhe);
        warning.getStyleClass().add("virhe");
        
        
    }

    @Override
    public Client getResult() {
        return clientPoint;
    }

    @Override
    public void handleShown() {
        editName.requestFocus();
        
    }


    @Override
    public void setDefault(Client client) {
        
        clientPoint = client;
        showClient(clientPoint);
        
        
    }
    
    /**
     * @param client - Client to show
     */
    public void showClient(Client client) {
        if (client == null) return;
        fields[0].setText(client.getName());
        fields[1].setText(client.getSurame());
        fields[2].setText(client.getStreet());
        fields[3].setText(client.getStreet2());
        fields[4].setText(client.getZIP());
        fields[5].setText(client.getCity());
        
        
    }

    /**
     * Show client in modal controller
     * @param modalityStage where to show
     * @param client - client to show
     * @return new stage with resources
     */
    public static Client askClient(Stage modalityStage, Client client) {
        
        return ModalController.showModal(ClientCardGUIController.class.getResource("ClientCardView.fxml"), 
                "Client Card",  modalityStage, client, null);
        
        
    }
    
    
    
}
