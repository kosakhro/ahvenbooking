package fxAhvenbooking;

import java.net.URL;
import java.util.ResourceBundle;

import bookings.Reservation;
import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.ModalControllerInterface;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

/**
 * @author Konstantin Sakharovskiy
 * @version Feb 7, 2019
 * event handle for Reservation Card page
 */
public class ReservationCardGUIController implements ModalControllerInterface<Reservation>, Initializable {

   
    @FXML private Label warning;
    
    @FXML private TextField editDayIn         ;
    @FXML private TextField editDayOut        ;
    @FXML private TextField editSource        ;
    @FXML private TextField editResidence     ;
    @FXML private TextField editManagedBy     ;
    @FXML private TextField editReferenceNo   ;
    @FXML private TextField editSpecialRequest;
    @FXML private TextField editPrereservation;
    
    @FXML private Label idReserv;
    @FXML private Label idClient;


 
    
    
    @FXML private void DoseNotWork() {
        
        Dialogs.showMessageDialog("Does not work yet, keep calm");
        
    }
        
   @FXML private void handleSave() {
        
        ModalController.closeStage(warning);
        //
    }
    
    @FXML private void handleDelete() {
        ModalController.closeStage(warning);
        //
    }
    
    
    @FXML private void handleNewRoom() {
        //
    }
    
    @FXML private void handleCloseWithoutSaving() {
        reservationPoint = null;
        ModalController.closeStage(warning);
        
    }
    
    
    
    //==================================================
    
    private Reservation reservationPoint;
    private TextField[] fields;
    private Label[] labels;
    
    @Override
    public void initialize(URL url, ResourceBundle bundle) {
        platform();
        
    }
    
    private void platform() {
        labels = new Label[] {idReserv, idClient};
        
        fields = new TextField[]{editDayIn            ,         
                                 editDayOut           ,        
                                 editSource           ,       
                                 editResidence        ,    
                                 editManagedBy        , 
                                 editReferenceNo      ,
                                 editSpecialRequest   ,
                                 editPrereservation   ,
                                                     };
         int i = 0;
         for (TextField field : fields) {
             final int k = ++i;
             field.setOnKeyReleased( e -> reservationChange(k, (TextField)(e.getSource())));
         }
    }
       
        
        
        private void reservationChange(int k, TextField textField) {
            if (reservationPoint == null) return;
            String s = textField.getText();
            String typo = null;
            switch (k) {
            case  1 : typo = reservationPoint.setDayIn(s);        break;
            case  2 : typo = reservationPoint.setDayOut(s);     break;
            case  3 : typo = reservationPoint.setSource(s);      break;
            case  4 : typo = reservationPoint.setResidence(s);     break;
            case  5 : typo = reservationPoint.setManagedBy(s);         break;
            case  6 : typo = reservationPoint.setReferenceNo(s);        break;
            case  7 : typo = reservationPoint.setSpecialRequest(s);     break;
            case  8 : typo = reservationPoint.setPrereservation(s);        break;
            
                                                 
            default :
           
            }
            
            if (typo == null) {
                Dialogs.setToolTipText(textField, "");
                textField.getStyleClass().removeAll("error");
                naytaVirhe(typo);
            } else {
                Dialogs.setToolTipText(textField, typo);
                textField.getStyleClass().add("error");
                naytaVirhe(typo);
            }
       
        }
        
        
        
        private void naytaVirhe(String virhe) {
            if (virhe == null || virhe.isEmpty()) {
                warning.setText("");
                warning.getStyleClass().removeAll("virhe");
                return;
            }
            warning.setText(virhe);
            warning.getStyleClass().add("virhe");     
        }
        
        
        @Override
        public Reservation getResult() {
            return reservationPoint;
        }

        @Override
        public void handleShown() {
            editDayIn.requestFocus();
            
        }
        
        @Override
        public void setDefault(Reservation reserv) {
            reservationPoint = reserv;
            showReservation(reservationPoint);
            
        }
    
   
    
    private void showReservation(Reservation reserv) {
        if (reserv == null) return;
        fields[ 0].setText(reserv.getDayIn());        
        fields[ 1].setText(reserv.getDayOut());        
        fields[ 2].setText(reserv.getSource());        
        fields[ 3].setText(reserv.getResidence());      
        fields[ 4].setText(reserv.getManagedBy());      
        fields[ 5].setText(reserv.getReferenceNo());    
        fields[ 6].setText(reserv.getSpeialRequest()); 
        fields[ 7].setText(reserv.getPrereservation()); 

        
        labels[0].setText("Reservation number: " + reservationPoint.getReservationNo());
        labels[1].setText("Clients number: " + reservationPoint.getClientsNo());
     
        }
    
    
    
    
    
    

    /**
     * Show reservation in modal controller
     * @param modalityStage where to show
     * @param reserv - reservation to show
     * @return new stage with resources
     */
    public static Reservation askReservation(Stage modalityStage, Reservation reserv) {
        
        return ModalController.showModal(ClientCardGUIController.class.getResource("ReservationCardView.fxml"), 
                "Reservation Card",  modalityStage, reserv, null);

    }

    

    

    
    
    
}