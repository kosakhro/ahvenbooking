package bookings;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
import bookings.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.03.22 16:52:12 // Generated by ComTest
 *
 */
public class ClientsBaseTest {



  // Generated by ComTest BEGIN
  /** 
   * testAdd81 
   * @throws HoldException when error
   */
  @Test
  public void testAdd81() throws HoldException {    // ClientsBase: 81
    ClientsBase clients = new ClientsBase(); 
    Client ronald = new Client(), george = new Client(); 
    assertEquals("From: ClientsBase line: 85", 0, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 86", 1, clients.getQnt()); 
    clients.add(george); assertEquals("From: ClientsBase line: 87", 2, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 88", 3, clients.getQnt()); 
    assertEquals("From: ClientsBase line: 89", ronald, clients.give(0)); 
    assertEquals("From: ClientsBase line: 90", george, clients.give(1)); 
    assertEquals("From: ClientsBase line: 91", ronald, clients.give(2)); 
    assertEquals("From: ClientsBase line: 92", false, clients.give(1) == ronald); 
    assertEquals("From: ClientsBase line: 93", true, clients.give(1) == george); 
    try {
    assertEquals("From: ClientsBase line: 94", ronald, clients.give(3)); 
    fail("ClientsBase: 94 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    clients.add(ronald); assertEquals("From: ClientsBase line: 95", 4, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 96", 5, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 97", 6, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 98", 7, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 99", 8, clients.getQnt()); 
    clients.add(ronald);  // #THROWS HoldException upscaled v.6
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSaveData207 
   * @throws HoldException when error
   */
  @Test
  public void testSaveData207() throws HoldException {    // ClientsBase: 207
    ClientsBase clients = new ClientsBase(); 
    Client bill = new Client(), ronald = new Client(); 
    bill.autogenerateContent(); 
    ronald.autogenerateContent(); 
    String folder = "testings"; 
    String databaseName = folder+"/clients"; 
    File dir = new File(folder); 
    dir.mkdir(); 
    try {
    clients.readData(databaseName); 
    fail("ClientsBase: 221 Did not throw HoldException");
    } catch(HoldException _e_){ _e_.getMessage(); }
    clients.add(bill); 
    clients.add(ronald); 
    Iterator<Client> i = clients.iterator(); 
    assertEquals("From: ClientsBase line: 225", bill, i.next()); 
    assertEquals("From: ClientsBase line: 226", ronald, i.next()); 
    assertEquals("From: ClientsBase line: 227", false, i.hasNext()); 
    clients.saveData(); 
    clients = new ClientsBase(); 
    clients.readData(databaseName); 
    Iterator<Client> u = clients.iterator(); 
    assertEquals("From: ClientsBase line: 233", bill, u.next()); 
    assertEquals("From: ClientsBase line: 234", ronald, u.next()); 
    assertEquals("From: ClientsBase line: 235", false, u.hasNext()); 
    clients.add(ronald); 
    clients.saveData(); 
    File bakOver = new File(databaseName+".bak"); 
    assertEquals("From: ClientsBase line: 239", true, bakOver.delete()); 
    File datOver = new File(databaseName+".dat"); 
    assertEquals("From: ClientsBase line: 241", true, datOver.delete()); 
  } // Generated by ComTest END
}