
package bookings;

import java.io.*;
import static database.DataGenerate.*;



/**
 * Does not know  Bases or UserInterface            
 * Can be modified                                  
 * Know all reservation columns                     
 * Can check and spell inputs                       
 * Can deliver information to ReservationsBase class
 * @author Konsta Sakharovskiy 
 * @version Mar 8, 2019
 *
 */
public class Reservation {
    
    private int clientsNo;
    private int reservationNo;
    private String dayIn = "";
    private String dayOut = "";
    private String source = "";
    private String residence = "";
    private String managedBy = "";
    private String referenceNo = "";
    private String specialRequest = "";
    private boolean preseravation;
    
    //private int adults;
    //private int kids;
    //private int babies;
    //private int cottageNo;
    
    private static int nextNo = 1;
      

    
    /**
     * @param args not in use
     */
    public static void main(String[] args) {
        
        Reservation testingRes1 = new Reservation();
        Reservation testingRes2 = new Reservation();

        
        testingRes1.assignReservation(777);
        testingRes1.register();
        testingRes1.printing(System.out);
        
        testingRes2.assignReservation(999);
        testingRes2.register();
        testingRes2.printing(System.out);
  
    }
    
    
    /**
     * initializing resrvation
     */
    public Reservation() {
        //access method
    }
    
    
    
    /**
     * initialize clients reservation
     * @param clientsNo clients number
     */
    public Reservation (int clientsNo) {
        this.clientsNo = clientsNo;
    }

    /**
     * Assign a uniqe number to the reservation.
     * @return new number
     * @example
     * <pre name="test">
     *   Reservation test = new Reservation();
     *   test.getReservationNo() === 0;
     *   test.register();
     *   Reservation test2 = new Reservation();
     *   test2.register();
     *   int n1 = test.getReservationNo();
     *   int n2 = test2.getReservationNo();
     *   n1 === n2-1;
     * </pre>
     */
    public int register() {
        reservationNo = nextNo;
        nextNo++;
        return reservationNo;     
    }
    
    
    /**
     * @return reservation number
     */
    public int getReservationNo() {
        return reservationNo;
    }
    
    /**
     * @return clients number
     */
    public int getClientsNo() {
        return clientsNo;
    }
    
    
    /**
     * Use to assign reservation to client as 1-N connection
     * @param i clients id number
     */  
    public void assignReservation(int i) {
        clientsNo = i;
        dayIn = generateDate();
        dayOut = generateNextDate(dayIn);
        source = "Booking.com";
        residence = "leisure";
        specialRequest = "Allergic Free";
             
    }
    
    /**
     * @param out print info
     */
    public void printing(PrintStream out){
        out.println("Reservation number: " + String.format("%03d", reservationNo) + " " + 
                    " Clients number: " + clientsNo);
        out.println( "day in: " +  dayIn + " " + "day out: " + dayOut + " " + "source " + source);
        out.println("residence: " + residence + " Special Request: " + specialRequest); 
        out.println("Managed by: " + managedBy + " Reference No: " + referenceNo +
                " Prereservation: " + preseravation);                
    }
    
    /**
     * @param os print the data
     */
    public void printing(OutputStream os) {       
        printing(new PrintStream(os));
    }

}
