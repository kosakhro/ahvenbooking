package bookings;
// Generated by ComTest BEGIN
import bookings.*;
import java.util.*;
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.03.22 17:02:26 // Generated by ComTest
 *
 */
public class ReservationsBaseTest {



  // Generated by ComTest BEGIN
  /** testIterator98 */
  @Test
  public void testIterator98() {    // ReservationsBase: 98
    ReservationsBase test = new ReservationsBase(); 
    Reservation res1 = new Reservation(2); test.add(res1); 
    Reservation res2 = new Reservation(1); test.add(res2); 
    Reservation res3 = new Reservation(2); test.add(res3); 
    Reservation res4 = new Reservation(1); test.add(res4); 
    Reservation res5 = new Reservation(2); test.add(res5); 
    Iterator<Reservation> testIterator = test.iterator(); 
    assertEquals("From: ReservationsBase line: 110", res1, testIterator.next()); 
    assertEquals("From: ReservationsBase line: 111", res2, testIterator.next()); 
    assertEquals("From: ReservationsBase line: 112", res3, testIterator.next()); 
    assertEquals("From: ReservationsBase line: 113", res4, testIterator.next()); 
    assertEquals("From: ReservationsBase line: 114", res5, testIterator.next()); 
    try {
    assertEquals("From: ReservationsBase line: 115", res1, testIterator.next()); 
    fail("ReservationsBase: 115 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Reservation res : test ) {
    assertEquals("From: ReservationsBase line: 121", jnrot[n], res.getClientsNo()); n++; 
    }
    assertEquals("From: ReservationsBase line: 124", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGiveReservations140 */
  @Test
  public void testGiveReservations140() {    // ReservationsBase: 140
    ReservationsBase test = new ReservationsBase(); 
    Reservation res1 = new Reservation(2); test.add(res1); 
    Reservation res2 = new Reservation(1); test.add(res2); 
    Reservation res3 = new Reservation(2); test.add(res3); 
    Reservation res4 = new Reservation(1); test.add(res4); 
    Reservation res5 = new Reservation(2); test.add(res5); 
    Reservation res6 = new Reservation(5); test.add(res6); 
    List<Reservation> found; 
    found = test.giveReservations(3); 
    assertEquals("From: ReservationsBase line: 151", 0, found.size()); 
    found = test.giveReservations(1); 
    assertEquals("From: ReservationsBase line: 153", 2, found.size()); 
    assertEquals("From: ReservationsBase line: 154", true, found.get(0) == res2); 
    assertEquals("From: ReservationsBase line: 155", true, found.get(1) == res4); 
    found = test.giveReservations(5); 
    assertEquals("From: ReservationsBase line: 157", 1, found.size()); 
    assertEquals("From: ReservationsBase line: 158", true, found.get(0) == res6); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSaveData208 
   * @throws HoldException when error
   */
  @Test
  public void testSaveData208() throws HoldException {    // ReservationsBase: 208
    ReservationsBase reserv = new ReservationsBase(); 
    Reservation reserv1 = new Reservation(), reserv2 = new Reservation(); 
    reserv1.assignReservation(777); 
    reserv1.register(); 
    reserv2.assignReservation(555); 
    reserv2.register(); 
    String folder = "testings"; 
    String databaseName = folder+"/reservations"; 
    File dir = new File(folder); 
    dir.mkdir(); 
    try {
    reserv.readData(databaseName); 
    fail("ReservationsBase: 224 Did not throw HoldException");
    } catch(HoldException _e_){ _e_.getMessage(); }
    reserv.add(reserv1); 
    reserv.add(reserv2); 
    Iterator<Reservation> i = reserv.iterator(); 
    assertEquals("From: ReservationsBase line: 228", reserv1, i.next()); 
    assertEquals("From: ReservationsBase line: 229", reserv2, i.next()); 
    assertEquals("From: ReservationsBase line: 230", false, i.hasNext()); 
    reserv.saveData(); 
    reserv = new ReservationsBase(); 
    reserv.readData(databaseName); 
    Iterator<Reservation> u = reserv.iterator(); 
    assertEquals("From: ReservationsBase line: 236", reserv1, u.next()); 
    assertEquals("From: ReservationsBase line: 237", reserv2, u.next()); 
    assertEquals("From: ReservationsBase line: 238", false, u.hasNext()); 
    reserv.add(reserv2); 
    reserv.saveData(); 
    File bakOver = new File(databaseName+".bak"); 
    assertEquals("From: ReservationsBase line: 242", true, bakOver.delete()); 
    File datOver = new File(databaseName+".dat"); 
    assertEquals("From: ReservationsBase line: 244", true, datOver.delete()); 
  } // Generated by ComTest END
}