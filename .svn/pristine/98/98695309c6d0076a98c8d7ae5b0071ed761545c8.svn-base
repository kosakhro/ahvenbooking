package fxAhvenbooking;


import java.awt.Desktop;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.List;


import bookings.CalendarView;
import bookings.Client;
import bookings.Reservation;
import bookings.Room;
import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import fi.jyu.mit.fxgui.TextAreaOutputStream;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.text.Font;
//import javafx.scene.control.Label;
import javafx.stage.Stage;



/**
 * handle events appears on the screen  
 * 
 * @author Konstantin Sakharovskiy
 * @version Mar 7, 2019 added reservations
 * 
 * event handle for main page
 */
public class AhvenbookingGUIController implements Initializable {
    
    
    
    @FXML private ScrollPane panelClient;
    @FXML private ScrollPane panelReservation;
    @FXML private ListChooser<Client> chooserClient;
    @FXML private ListChooser<Reservation> chooserReservation;
    



    @Override
    public void initialize(URL url, ResourceBundle bundle) {
        platform();      
    }
       
    
    @FXML private void DoseNotWork() {
        
        Dialogs.showMessageDialog("Does not work yet, keep calm");
        
    }
    
    @FXML private void handlePressedClientSearch() {

    try {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("ClientSearchView.fxml"));
        Parent root1 = (Parent) fxmlLoader.load();
        Stage stage = new Stage();
        stage.setTitle("New windows");
        stage.setScene(new Scene(root1));
        stage.show();

    } catch(Exception e) {
        e.printStackTrace();
    }

    }
    

    @FXML private void handlePressedReservationSearch() {

    try {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("ReservationSearchView.fxml"));
        Parent root1 = (Parent) fxmlLoader.load();
        Stage stage = new Stage();
        stage.setTitle("New windows");
        stage.setScene(new Scene(root1));
        stage.show();

    } catch(Exception e) {
        e.printStackTrace();
    }

    }    
    
    
    @FXML private void handlePressedClientCard() {

    newClient();

    }
    
    
    @FXML private void handleHelp() {
        helping();
    }
    
    
    @FXML private void handlePressedReservationCard() {
        
        newReservation();

    }
    
    @FXML private void handlePressedRoomsCard() {
        
        newRoom();

    }
    
    
    //==================================================
    
    CalendarView calendar = new CalendarView();   
    private TextArea areaClient = new TextArea();
    private TextArea areaReservation = new TextArea();
    private Client clientPoint;
    private Reservation reservationPoint;
    
    
    /**
     * set platform to show clients and reservations in panels
     */
    protected void platform() {
        panelClient.setContent(areaClient);
        panelReservation.setContent(areaReservation);

        areaClient.setFont(new Font("Helvetica", 10));
        panelClient.setFitToHeight(true);
        areaReservation.setFont(new Font("Helvetica", 10));
        panelReservation.setFitToHeight(true);

        chooserClient.clear();
        chooserClient.addSelectionListener(e -> showClient());
        
        chooserReservation.clear();
        chooserReservation.addSelectionListener(e -> showReservation());
        
    }
    
    /**
     * show client by asking Clent class
     */
    protected void showClient() {
        clientPoint = chooserClient.getSelectedObject();
        if (clientPoint == null) return;
        areaClient.setText(" ");
        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaClient)) {
            printing(os, clientPoint);
        }
    }
    
  
    /**
     * show reservation by asking Reservation class
     */
    protected void showReservation() {
        reservationPoint = chooserReservation.getSelectedObject();
        if (reservationPoint == null) return;
        areaReservation.setText(" ");
        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaReservation)) {
            printing(os, reservationPoint);
        }
    }
    
    /**
     * Printing clients info include all reservations, include all rooms
     * @param os datastream to print
     * @param client printing client
     */
    public void printing(PrintStream os, final Client client) {
        os.println("========================================");
        client.printing(os);
        os.println("=========================================");
        List<Reservation> reservations = calendar.giveReservations(client);   
        for (Reservation res: reservations) {
            res.printing(os);
            os.println("+++++++++++++++++++++++++++++++++++++++");
            List<Room> rooms = calendar.giveRooms(res);   
            for (Room rm: rooms) {
                rm.printing(os);
                os.println("......................................");
            }
        }
        
    }
    
    /**
     * Printing reservations info, include all rooms
     * @param os datastream to print
     * @param reservation printing reservation
     */
    public void printing(PrintStream os, final Reservation reservation) {
        os.println("+++++++++++++++++++++++++++++++++++++++");
        reservation.printing(os);
        os.println("+++++++++++++++++++++++++++++++++++++++");
        List<Room> rooms = calendar.giveRooms(reservation);   
        for (Room rm: rooms) {
            rm.printing(os);
            os.println("......................................");
        }
        
    }
    
        
    
    /**
     *  adding client by asking Client class
     */
    protected void newClient() {
        Client client = new Client();
        client.register();
        client.autogenerateContent();
        
        try {
            calendar.add(client);
        } catch (Exception e) {
            Dialogs.showMessageDialog("No more clients allowed ");
            return;
        }       
        setClient(client.getRegisterNro());       
    }
    
    /**
     * adding reservation to client by asking reservation class
     */
    public void newReservation() {
        if (clientPoint == null) return;
        Reservation res = new Reservation();
        res.register();
        res.assignReservation(clientPoint.getRegisterNro());
        calendar.add(res);
        setClient(clientPoint.getRegisterNro());
        String resName = "Reservation No: " + res.getReservationNo();
        chooserReservation.add(resName, res);
    }
    
    /**
     * adding rooms to reservation 
     */
    public void newRoom() {
        if (reservationPoint == null) return;
        Room rm = new Room();
        rm.register();
        rm.assignRoom(reservationPoint.getReservationNo());
        calendar.add(rm);
        setClient(clientPoint.getRegisterNro());
    }
    
           
    /**
     * set client to chooser by number
     * @param clientnro clients number
     */
    protected void setClient(int clientnro) {
        chooserClient.clear();
        int index = 0;
        for (int i = 0; i < calendar.getClients(); i++) {
            Client client = calendar.giveClient(i);
            if (client.getRegisterNro() == clientnro) index = i;
            chooserClient.add(client.getName(), client);
        }
        chooserClient.setSelectedIndex(index); 
    }
        
    /**
     * set own calendar
     * @param calendar using calendar
     */
    public void setCalendarView(CalendarView calendar) {
        this.calendar = calendar;
        showClient();
        
    }
    
    
    
    /**
     * link request to the program help page - coursework project page
     */
    private void helping() {
        Desktop desktop = Desktop.getDesktop();
        try {
            URI uri = new URI("https://tim.jyu.fi/view/kurssit/tie/ohj2/2019k/ht/ahvenbooking");
            desktop.browse(uri);
        } catch (URISyntaxException e) {
            return;
        } catch (IOException e) {
            return;
        }
    }
    
    
}
