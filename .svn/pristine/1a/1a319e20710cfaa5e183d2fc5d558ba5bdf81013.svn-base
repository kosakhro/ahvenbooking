package bookings;
// Generated by ComTest BEGIN
import bookings.*;
import java.util.*;
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.03.22 17:06:57 // Generated by ComTest
 *
 */
public class RoomsBaseTest {



  // Generated by ComTest BEGIN
  /** testIterator83 */
  @Test
  public void testIterator83() {    // RoomsBase: 83
    RoomsBase test = new RoomsBase(); 
    Room res1 = new Room(); test.add(res1); 
    Room res2 = new Room(); test.add(res2); 
    Room res3 = new Room(); test.add(res3); 
    Room res4 = new Room(); test.add(res4); 
    Room res5 = new Room(); test.add(res5); 
    Iterator<Room> testIterator = test.iterator(); 
    assertEquals("From: RoomsBase line: 95", res1, testIterator.next()); 
    assertEquals("From: RoomsBase line: 96", res2, testIterator.next()); 
    assertEquals("From: RoomsBase line: 97", res3, testIterator.next()); 
    assertEquals("From: RoomsBase line: 98", res4, testIterator.next()); 
    assertEquals("From: RoomsBase line: 99", res5, testIterator.next()); 
    try {
    assertEquals("From: RoomsBase line: 100", res1, testIterator.next()); 
    fail("RoomsBase: 100 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSaveData163 
   * @throws HoldException when error
   */
  @Test
  public void testSaveData163() throws HoldException {    // RoomsBase: 163
    RoomsBase rooms = new RoomsBase(); 
    Room room1 = new Room(), room2 = new Room(); 
    room1.assignRoom(777); 
    room1.register(); 
    room2.assignRoom(555); 
    room2.register(); 
    String folder = "testings"; 
    String databaseName = folder+"/rooms"; 
    File dir = new File(folder); 
    dir.mkdir(); 
    try {
    rooms.readData(databaseName); 
    fail("RoomsBase: 179 Did not throw HoldException");
    } catch(HoldException _e_){ _e_.getMessage(); }
    rooms.add(room1); 
    rooms.add(room2); 
    Iterator<Room> i = rooms.iterator(); 
    assertEquals("From: RoomsBase line: 183", room1, i.next()); 
    assertEquals("From: RoomsBase line: 184", room2, i.next()); 
    assertEquals("From: RoomsBase line: 185", false, i.hasNext()); 
    rooms.saveData(); 
    rooms = new RoomsBase(); 
    rooms.readData(databaseName); 
    Iterator<Room> u = rooms.iterator(); 
    assertEquals("From: RoomsBase line: 191", room1, u.next()); 
    assertEquals("From: RoomsBase line: 192", room2, u.next()); 
    assertEquals("From: RoomsBase line: 193", false, u.hasNext()); 
    rooms.add(room2); 
    rooms.saveData(); 
    File bakOver = new File(databaseName+".bak"); 
    assertEquals("From: RoomsBase line: 197", true, bakOver.delete()); 
    File datOver = new File(databaseName+".dat"); 
    assertEquals("From: RoomsBase line: 199", true, datOver.delete()); 
  } // Generated by ComTest END
}