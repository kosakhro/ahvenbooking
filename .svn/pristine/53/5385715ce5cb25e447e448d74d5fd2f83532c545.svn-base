package bookings;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
import java.util.Collection;
import bookings.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.25 15:49:01 // Generated by ComTest
 *
 */
public class ClientsBaseTest {



  // Generated by ComTest BEGIN
  /** 
   * testAdd83 
   * @throws HoldException when error
   */
  @Test
  public void testAdd83() throws HoldException {    // ClientsBase: 83
    ClientsBase clients = new ClientsBase(); 
    Client ronald = new Client(), george = new Client(); 
    assertEquals("From: ClientsBase line: 87", 0, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 88", 1, clients.getQnt()); 
    clients.add(george); assertEquals("From: ClientsBase line: 89", 2, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 90", 3, clients.getQnt()); 
    assertEquals("From: ClientsBase line: 91", ronald, clients.give(0)); 
    assertEquals("From: ClientsBase line: 92", george, clients.give(1)); 
    assertEquals("From: ClientsBase line: 93", ronald, clients.give(2)); 
    assertEquals("From: ClientsBase line: 94", false, clients.give(1) == ronald); 
    assertEquals("From: ClientsBase line: 95", true, clients.give(1) == george); 
    try {
    assertEquals("From: ClientsBase line: 96", ronald, clients.give(3)); 
    fail("ClientsBase: 96 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    clients.add(ronald); assertEquals("From: ClientsBase line: 97", 4, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 98", 5, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 99", 6, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 100", 7, clients.getQnt()); 
    clients.add(ronald); assertEquals("From: ClientsBase line: 101", 8, clients.getQnt()); 
    clients.add(ronald);  // #THROWS HoldException upscaled v.6
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSaveData209 
   * @throws HoldException when error
   */
  @Test
  public void testSaveData209() throws HoldException {    // ClientsBase: 209
    ClientsBase clients = new ClientsBase(); 
    Client bill = new Client(), ronald = new Client(); 
    bill.autogenerateContent(); 
    ronald.autogenerateContent(); 
    String folder = "testings"; 
    String databaseName = folder+"/clients"; 
    File dir = new File(folder); 
    dir.mkdir(); 
    try {
    clients.readData(databaseName); 
    fail("ClientsBase: 223 Did not throw HoldException");
    } catch(HoldException _e_){ _e_.getMessage(); }
    clients.add(bill); 
    clients.add(ronald); 
    Iterator<Client> i = clients.iterator(); 
    assertEquals("From: ClientsBase line: 227", bill, i.next()); 
    assertEquals("From: ClientsBase line: 228", ronald, i.next()); 
    assertEquals("From: ClientsBase line: 229", false, i.hasNext()); 
    clients.saveData(); 
    clients = new ClientsBase(); 
    clients.readData(databaseName); 
    Iterator<Client> u = clients.iterator(); 
    assertEquals("From: ClientsBase line: 235", bill, u.next()); 
    assertEquals("From: ClientsBase line: 236", ronald, u.next()); 
    assertEquals("From: ClientsBase line: 237", false, u.hasNext()); 
    clients.add(ronald); 
    clients.saveData(); 
    File bakOver = new File(databaseName+".bak"); 
    assertEquals("From: ClientsBase line: 241", true, bakOver.delete()); 
    File datOver = new File(databaseName+".dat"); 
    assertEquals("From: ClientsBase line: 243", true, datOver.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSearch273 
   * @throws HoldException when error
   */
  @Test
  public void testSearch273() throws HoldException {    // ClientsBase: 273
    ClientsBase clients = new ClientsBase(); 
    Client c1 = new Client(); c1.parse("222|Mr.|Bibrik|Tornius||||DC|USA||+1234|+9876|5555|false||facebook.com||||7777||||false"); 
    Client c2 = new Client(); c2.parse("333|Mr.|Korma|Tuata||||DC|USA||+1234|+9876|5555|false||facebook.com||||7777||||false"); 
    Client c3 = new Client(); c3.parse("444|Mr.|Molka|Bambik||||DC|USA||+1234|+9876|5555|false||facebook.com||||7777||||false"); 
    Client c4 = new Client(); c4.parse("22|Mr.|Svego|Muu||||DC|USA||+1234|+9876|5555|false||facebook.com||||7777||||false"); 
    Client c5 = new Client(); c5.parse("11||Koloolo|Baaya||||DC|USA||+1234|+9876|5555|false||facebook.com||||7777||||false"); 
    clients.add(c1); clients.add(c2); clients.add(c3); clients.add(c4); clients.add(c5); 
    Collection<Client> found; 
    found = clients.search("Mr.",1); 
    assertEquals("From: ClientsBase line: 285", 4, found.size()); 
    assertEquals("From: ClientsBase line: 286", true, found.contains(c1)); 
  } // Generated by ComTest END
}